---
import type { GetStaticPaths } from "astro";
import type { PokemonListResponse } from "@interfaces/pokemon-list.response";
import PokemonCard from "@components/pokemons/PokemonCard.astro";
import Title from "@components/shared/Title.astro";
import MainLayout from "@layouts/MainLayout.astro";
import HeartOutline from "@icons/HeartOutline.astro";
import HeartFilled from "@icons/HeartFilled.astro";

export const getStaticPaths = (async () => {
  const response = await fetch("https://pokeapi.co/api/v2/pokemon?limit=151");
  const { results } = (await response.json()) as PokemonListResponse;
  return results.map(({ name, url }) => ({
    params: { name },
    props: { url },
  }));
}) satisfies GetStaticPaths;
const { name } = Astro.params;
const { url } = Astro.props;
const id = url.split("/").at(-2);
const audioSrc =
  "https://raw.githubusercontent.com/PokeAPI/cries/main/cries/pokemon/legacy/1.ogg";
---

<MainLayout title="Algún Pokémon">
  <section class="mt-10 mx-10 flex flex-col justify-center items-center">
    <div class="flex">
      <div>
        <button onclick="history.back()" class="text-amber-300 cursor-pointer"
          >Regresar</button
        >
        <Title>{name}</Title>
      </div>
      <button
        id="btn-favorite"
        class="ml-4 hover:animate-pulse"
        data-name={name}
        data-id={id}
      >
        <HeartOutline size={50} data-outline />
        <HeartFilled size={50} class="hidden" data-filled />
      </button>
    </div>
    <PokemonCard name={name} url={url} isBig />
    <audio controls class="mt-5">
      <source src={audioSrc} type="audio/ogg" />
      Your browser does not support the audio element.
    </audio>
  </section>
</MainLayout>
<script>
  // Interfaz TypeScript para definir la estructura de un Pokémon favorito
  interface FavoritePokemon {
    id: string;
    name: string;
  }

  // Evento que se dispara cuando la página de Astro se carga completamente
  document.addEventListener("astro:page-load", () => {
    // Utilidades para manejo de localStorage
    const getFavorites = (): FavoritePokemon[] =>
      JSON.parse(localStorage.getItem("favorites") ?? "[]");
    const saveFavorites = (favs: FavoritePokemon[]) =>
      localStorage.setItem("favorites", JSON.stringify(favs));

    // Elementos del DOM
    const btn = document.getElementById("btn-favorite") as HTMLButtonElement;
    if (!btn) return;

    // Extraer datos del pokémon usando destructuring
    const { name = "", id = "" } = btn.dataset;
    const [outline, filled] = ["[data-outline]", "[data-filled]"].map(
      (selector) => btn.querySelector(selector) as HTMLElement
    );

    // Funciones principales
    const isFavorite = () => getFavorites().some((fav) => fav.name === name);
    const updateUI = () => {
      const isFav = isFavorite();
      // Alternar visibilidad de íconos basado en el estado de favorito
      outline.classList.toggle("hidden", isFav);
      filled.classList.toggle("hidden", !isFav);
    };

    // Inicialización: mostrar el estado correcto al cargar la página
    updateUI();

    // Event listener: alternar favorito al hacer clic
    btn.onclick = () => {
      const favs = getFavorites();
      // Usar operador ternario y spread operator para actualizar la lista
      const newFavs = isFavorite()
        ? favs.filter((fav) => fav.name !== name) // Remover si existe
        : [...favs, { id, name }]; // Agregar si no existe

      saveFavorites(newFavs);
      updateUI();
    };
  });
</script>
